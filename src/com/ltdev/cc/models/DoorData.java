/**
 * Copyright (c) 2010-2012 Lightning Development Studios <lightningdevelopmentstudios@gmail.com>
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.ltdev.cc.models;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;
import java.nio.ShortBuffer;

import javax.microedition.khronos.opengles.GL11;

/**
 * Automatically generated vertex data for model "Door.obj".
 * @author Lightning Development Studios
 */
public final class DoorData
{
    /**
     * The number of vertices in the array.
     */
    public static final int VERTEX_COUNT = 140;

    /**
     * The number of floats in the array.
     */
    public static final int VERTEX_FLOAT_COUNT = 1120;

    /**
     * The number of floats in the array.
     */
    public static final int VERTEX_BYTE_COUNT = 4480;

    /**
     * Vertex data.
     */
    public static final float[] VERTICES =
    {
        17.70327f, 13.00475f, 26.33019f, 0.904852f, 0.244082f, 0f, 1f, 0f,
        22.09164f, 13.00475f, 26.33019f, 0.962928f, 0.244082f, 0f, 1f, 0f,
        17.70327f, 13.00475f, 47.09617f, 0.904852f, 0.04362798f, 0f, 1f, 0f,
        22.09164f, 13.00475f, 47.09617f, 0.962928f, 0.04362798f, 0f, 1f, 0f,
        -35.19669f, 10.53146f, 73.42635f, 0.231572f, 0.258136f, 0f, 0f, 1f,
        36.80331f, 10.53146f, 73.42635f, 0.106271f, 0.258136f, 0f, 0f, 1f,
        -35.19669f, -9.468537f, 73.42635f, 0.231572f, 0.292941f, 0f, 0f, 1f,
        36.80331f, -9.468537f, 73.42635f, 0.106271f, 0.292941f, 0f, 0f, 1f,
        17.70327f, -11.94182f, 47.09617f, 0.904852f, 0.04362798f, 0f, -1f, 0f,
        22.09164f, -11.94182f, 47.09617f, 0.962928f, 0.04362798f, 0f, -1f, 0f,
        17.70327f, -11.94182f, 26.33019f, 0.904852f, 0.244082f, 0f, -1f, 0f,
        22.09164f, -11.94182f, 26.33019f, 0.962928f, 0.244082f, 0f, -1f, 0f,
        36.80331f, 10.53146f, 3E-06f, 0.035317f, 0.963398f, 1f, 0f, 0f,
        36.80331f, -9.468537f, 3E-06f, 0.175825f, 0.963398f, 1f, 0f, 0f,
        36.80331f, 10.53146f, 73.42635f, 0.035317f, 0.325866f, 1f, 0f, 0f,
        36.80331f, -9.468537f, 73.42635f, 0.175825f, 0.325866f, 1f, 0f, 0f,
        -35.19669f, -9.468537f, 3E-06f, 0.035332f, 0.963398f, -1f, 0f, 0f,
        -35.19669f, 10.53146f, 3E-06f, 0.17584f, 0.963398f, -1f, 0f, 0f,
        -35.19669f, -9.468537f, 73.42635f, 0.035332f, 0.325866f, -1f, 0f, 0f,
        -35.19669f, 10.53146f, 73.42635f, 0.17584f, 0.325866f, -1f, 0f, 0f,
        -29.24615f, 14.05672f, 3E-06f, 0.311968f, 0.979793f, 0.000445f, 0.999999f, 0.001135f,
        32.87957f, 14.05672f, 3E-06f, 0.975101f, 0.979793f, -0.00211f, 0.999997f, 0.001513f,
        12.82919f, 14.01927f, 16.49578f, 0.761082f, 0.821536f, 0.000445f, 0.999999f, 0.001135f,
        26.96571f, 14.01927f, 16.49578f, 0.911976f, 0.821536f, -0.004221f, 0.999991f, 0.000757f,
        32.87957f, 14.05672f, 69.12115f, 0.975101f, 0.31666f, -0.003166f, 0.999994f, -0.001536f,
        26.96571f, 14.01927f, 56.93058f, 0.911976f, 0.433614f, -0.003166f, 0.999994f, -0.001536f,
        -29.24615f, 14.05672f, 69.12115f, 0.311968f, 0.31666f, 0.000593f, 0.999999f, -0.001024f,
        12.82919f, 14.01927f, 56.93058f, 0.761082f, 0.433614f, 0.000297f, 0.999998f, -0.002048f,
        -29.24615f, -12.99379f, 69.12115f, 0.311968f, 0.31666f, 0.000593f, -0.999999f, -0.001024f,
        32.87957f, -12.99379f, 69.12115f, 0.975101f, 0.31666f, -0.003166f, -0.999994f, -0.001536f,
        12.82919f, -12.95635f, 56.93058f, 0.761082f, 0.433614f, 0.000297f, -0.999998f, -0.002048f,
        26.96571f, -12.95635f, 56.93058f, 0.911976f, 0.433614f, -0.003165f, -0.999994f, -0.001536f,
        32.87957f, -12.99379f, 3E-06f, 0.975101f, 0.979793f, -0.00211f, -0.999997f, 0.001513f,
        26.96571f, -12.95635f, 16.49578f, 0.911976f, 0.821536f, -0.004221f, -0.999991f, 0.000757f,
        -29.24615f, -12.99379f, 3E-06f, 0.311968f, 0.979793f, 0.000445f, -0.999999f, 0.001135f,
        12.82919f, -12.95635f, 16.49578f, 0.761082f, 0.821536f, 0.000445f, -0.999999f, 0.001135f,
        12.82919f, 14.01927f, 16.49578f, 0.33153f, 0.04119402f, 0f, 0.861182f, -0.508297f,
        26.96571f, 14.01927f, 16.49578f, 0.33153f, 0.273402f, 0f, 0.861182f, -0.508297f,
        13.02585f, 16.36786f, 20.47486f, 0.384037f, 0.04442501f, 0f, 0.861182f, -0.508297f,
        26.76906f, 16.36786f, 20.47486f, 0.384037f, 0.270172f, 0f, 0.861182f, -0.508297f,
        26.96571f, 14.01927f, 16.49578f, 0.226725f, 0.945181f, 0.996513f, 0.083441f, 0f,
        26.96571f, 14.01927f, 56.93058f, 0.226725f, 0.333402f, 0.996513f, 0.083441f, 0f,
        26.76906f, 16.36786f, 20.47486f, 0.200669f, 0.884978f, 0.996513f, 0.083441f, 0f,
        26.76906f, 16.36786f, 52.9515f, 0.200669f, 0.393605f, 0.996513f, 0.083441f, 0f,
        26.96571f, 14.01927f, 56.93058f, 0.865101f, 0.273402f, 0f, 0.861182f, 0.508298f,
        12.82919f, 14.01927f, 56.93058f, 0.865101f, 0.04119402f, 0f, 0.861182f, 0.508297f,
        26.76906f, 16.36786f, 52.9515f, 0.812594f, 0.270172f, 0f, 0.861182f, 0.508297f,
        13.02585f, 16.36786f, 52.9515f, 0.812593f, 0.04442501f, 0f, 0.861182f, 0.508297f,
        12.82919f, 14.01927f, 56.93058f, 0.226725f, 0.333402f, -0.996513f, 0.083441f, 0f,
        12.82919f, 14.01927f, 16.49578f, 0.226725f, 0.945181f, -0.996513f, 0.083441f, 0f,
        13.02585f, 16.36786f, 52.9515f, 0.200669f, 0.393605f, -0.996513f, 0.083441f, 0f,
        13.02585f, 16.36786f, 20.47486f, 0.200669f, 0.884978f, -0.996513f, 0.083442f, 0f,
        12.82919f, -12.95635f, 56.93058f, 0.865101f, 0.04119402f, 0f, -0.861182f, 0.508297f,
        26.96571f, -12.95635f, 56.93058f, 0.865101f, 0.273402f, 0f, -0.861182f, 0.508297f,
        13.02585f, -15.30493f, 52.9515f, 0.812593f, 0.04442501f, 0f, -0.861182f, 0.508297f,
        26.76906f, -15.30493f, 52.9515f, 0.812594f, 0.270172f, 0f, -0.861182f, 0.508297f,
        26.96571f, -12.95635f, 56.93058f, 0.226723f, 0.333402f, 0.996513f, -0.083441f, 0f,
        26.96571f, -12.95635f, 16.49578f, 0.226723f, 0.945181f, 0.996513f, -0.083441f, 0f,
        26.76906f, -15.30493f, 52.9515f, 0.200667f, 0.393605f, 0.996513f, -0.083441f, 0f,
        26.76906f, -15.30493f, 20.47486f, 0.200667f, 0.884978f, 0.996513f, -0.083441f, 0f,
        26.96571f, -12.95635f, 16.49578f, 0.33153f, 0.273402f, 0f, -0.861182f, -0.508297f,
        12.82919f, -12.95635f, 16.49578f, 0.33153f, 0.04119402f, 0f, -0.861182f, -0.508297f,
        26.76906f, -15.30493f, 20.47486f, 0.384037f, 0.270172f, 0f, -0.861182f, -0.508297f,
        13.02585f, -15.30493f, 20.47486f, 0.384037f, 0.04442501f, 0f, -0.861182f, -0.508297f,
        12.82919f, -12.95635f, 16.49578f, 0.226723f, 0.945181f, -0.996513f, -0.083442f, 0f,
        12.82919f, -12.95635f, 56.93058f, 0.226723f, 0.333402f, -0.996513f, -0.083442f, 0f,
        13.02585f, -15.30493f, 20.47486f, 0.200667f, 0.884978f, -0.996513f, -0.083442f, 0f,
        13.02585f, -15.30493f, 52.9515f, 0.200667f, 0.393605f, -0.996513f, -0.083442f, 0f,
        13.02585f, 16.36786f, 20.47486f, 0.384037f, 0.04442501f, -0.021961f, 0.999724f, -0.008334f,
        26.76906f, 16.36786f, 20.47486f, 0.384037f, 0.270172f, 0.01098f, 0.999801f, -0.016667f,
        16.73087f, 16.48995f, 25.35779f, 0.448471f, 0.105284f, -0.010981f, 0.999801f, -0.016667f,
        23.06404f, 16.48995f, 25.35779f, 0.448471f, 0.209313f, 0.021961f, 0.999724f, -0.008334f,
        26.76906f, 16.36786f, 52.9515f, 0.812594f, 0.270172f, 0.021961f, 0.999724f, 0.008334f,
        23.06404f, 16.48995f, 48.06857f, 0.748159f, 0.209313f, 0.010981f, 0.999801f, 0.016668f,
        13.02585f, 16.36786f, 52.9515f, 0.812593f, 0.04442501f, -0.010981f, 0.999801f, 0.016668f,
        16.73087f, 16.48995f, 48.06857f, 0.748159f, 0.105284f, -0.021961f, 0.999724f, 0.008334f,
        13.02585f, -15.30493f, 52.9515f, 0.812593f, 0.04442501f, -0.021961f, -0.999724f, 0.008334f,
        26.76906f, -15.30493f, 52.9515f, 0.812594f, 0.270172f, 0.010981f, -0.999801f, 0.016668f,
        16.73087f, -15.42702f, 48.06857f, 0.748159f, 0.105284f, -0.010981f, -0.999801f, 0.016668f,
        23.06404f, -15.42702f, 48.06857f, 0.748159f, 0.209313f, 0.021961f, -0.999724f, 0.008334f,
        26.76906f, -15.30493f, 20.47486f, 0.384037f, 0.270172f, 0.021961f, -0.999724f, -0.008334f,
        23.06404f, -15.42702f, 25.35779f, 0.448471f, 0.209313f, 0.010981f, -0.999801f, -0.016667f,
        13.02585f, -15.30493f, 20.47486f, 0.384037f, 0.04442501f, -0.010981f, -0.999801f, -0.016667f,
        16.73087f, -15.42702f, 25.35779f, 0.448471f, 0.105284f, -0.021961f, -0.999724f, -0.008334f,
        16.73087f, 16.48995f, 25.35779f, 0.898637f, 0.291536f, 0f, 0.268744f, 0.963212f,
        23.06404f, 16.48995f, 25.35779f, 0.963205f, 0.291536f, 0f, 0.268745f, 0.963211f,
        17.70327f, 13.00475f, 26.33019f, 0.908551f, 0.271766f, 0f, 0.268745f, 0.963211f,
        22.09164f, 13.00475f, 26.33019f, 0.953291f, 0.271766f, 0f, 0.268745f, 0.963212f,
        23.06404f, 16.48995f, 25.35779f, 0.253128f, 0.811099f, -0.963211f, 0.268745f, 0f,
        23.06404f, 16.48995f, 48.06857f, 0.253128f, 0.467484f, -0.963211f, 0.268745f, 0f,
        22.09164f, 13.00475f, 26.33019f, 0.291794f, 0.796386f, -0.963211f, 0.268745f, 0f,
        22.09164f, 13.00475f, 47.09617f, 0.291794f, 0.482197f, -0.963211f, 0.268745f, 0f,
        23.06404f, 16.48995f, 48.06857f, 0.963205f, 0.291536f, 0f, 0.268744f, -0.963212f,
        16.73087f, 16.48995f, 48.06857f, 0.898637f, 0.291536f, 0f, 0.268744f, -0.963212f,
        22.09164f, 13.00475f, 47.09617f, 0.953291f, 0.271766f, 0f, 0.268744f, -0.963212f,
        17.70327f, 13.00475f, 47.09617f, 0.908551f, 0.271766f, 0f, 0.268744f, -0.963212f,
        16.73087f, 16.48995f, 48.06857f, 0.253128f, 0.467484f, 0.963211f, 0.268744f, 0f,
        16.73087f, 16.48995f, 25.35779f, 0.253128f, 0.811099f, 0.963211f, 0.268744f, 0f,
        17.70327f, 13.00475f, 47.09617f, 0.291794f, 0.482197f, 0.963211f, 0.268744f, 0f,
        17.70327f, 13.00475f, 26.33019f, 0.291794f, 0.796386f, 0.963211f, 0.268744f, 0f,
        16.73087f, -15.42702f, 48.06857f, 0.898637f, 0.291525f, 0f, -0.268744f, -0.963212f,
        23.06404f, -15.42702f, 48.06857f, 0.963205f, 0.291525f, 0f, -0.268744f, -0.963212f,
        17.70327f, -11.94182f, 47.09617f, 0.908551f, 0.271755f, 0f, -0.268744f, -0.963212f,
        22.09164f, -11.94182f, 47.09617f, 0.953291f, 0.271755f, 0f, -0.268745f, -0.963212f,
        23.06404f, -15.42702f, 48.06857f, 0.253126f, 0.467484f, -0.963211f, -0.268745f, 0f,
        23.06404f, -15.42702f, 25.35779f, 0.253126f, 0.811099f, -0.963211f, -0.268745f, 0f,
        22.09164f, -11.94182f, 47.09617f, 0.291792f, 0.482197f, -0.963211f, -0.268745f, 0f,
        22.09164f, -11.94182f, 26.33019f, 0.291792f, 0.796386f, -0.963211f, -0.268745f, 0f,
        23.06404f, -15.42702f, 25.35779f, 0.963205f, 0.291525f, 0f, -0.268744f, 0.963212f,
        16.73087f, -15.42702f, 25.35779f, 0.898637f, 0.291525f, 0f, -0.268745f, 0.963211f,
        22.09164f, -11.94182f, 26.33019f, 0.953291f, 0.271755f, 0f, -0.268745f, 0.963211f,
        17.70327f, -11.94182f, 26.33019f, 0.908551f, 0.271755f, 0f, -0.268745f, 0.963211f,
        16.73087f, -15.42702f, 25.35779f, 0.253126f, 0.811099f, 0.963212f, -0.268744f, 0f,
        16.73087f, -15.42702f, 48.06857f, 0.253126f, 0.467484f, 0.963212f, -0.268744f, 0f,
        17.70327f, -11.94182f, 26.33019f, 0.291792f, 0.796386f, 0.963212f, -0.268744f, 0f,
        17.70327f, -11.94182f, 47.09617f, 0.291792f, 0.482197f, 0.963211f, -0.268744f, 0f,
        36.80331f, 10.53146f, 73.42635f, 0.295262f, 0.03020102f, 0.668324f, 0.74387f, 0f,
        32.87957f, 14.05672f, 69.12115f, 0.281107f, 0.04573101f, 0.668324f, 0.74387f, 0f,
        36.80331f, 10.53146f, 3E-06f, 0.295262f, 0.295079f, 0.668324f, 0.74387f, 0f,
        32.87957f, 14.05672f, 3E-06f, 0.281107f, 0.295079f, 0.668325f, 0.74387f, 0f,
        -35.19669f, 10.53146f, 73.42635f, 0.035529f, 0.03020102f, 0f, 0.773708f, 0.633542f,
        -29.24615f, 14.05672f, 69.12115f, 0.056995f, 0.04573101f, 0f, 0.773709f, 0.633542f,
        36.80331f, 10.53146f, 73.42635f, 0.295262f, 0.03020102f, 0f, 0.773709f, 0.633542f,
        32.87957f, 14.05672f, 69.12115f, 0.281107f, 0.04573101f, 0f, 0.773709f, 0.633541f,
        -35.19669f, 10.53146f, 73.42635f, 0.035529f, 0.03020102f, -0.509696f, 0.860355f, 0f,
        -35.19669f, 10.53146f, 3E-06f, 0.035529f, 0.295079f, -0.509696f, 0.860355f, 0f,
        -29.24615f, 14.05672f, 69.12115f, 0.056995f, 0.04573101f, -0.509696f, 0.860355f, 0f,
        -29.24615f, 14.05672f, 3E-06f, 0.056995f, 0.295079f, -0.509696f, 0.860355f, 0f,
        -35.19669f, -9.468537f, 73.42635f, 0.035529f, 0.03020102f, 0f, -0.773708f, 0.633542f,
        36.80331f, -9.468537f, 73.42635f, 0.295262f, 0.03020102f, 0f, -0.773709f, 0.633541f,
        -29.24615f, -12.99379f, 69.12115f, 0.056995f, 0.04573101f, 0f, -0.773709f, 0.633541f,
        32.87957f, -12.99379f, 69.12115f, 0.281107f, 0.04573101f, 0f, -0.773709f, 0.633541f,
        36.80331f, -9.468537f, 73.42635f, 0.295262f, 0.03020102f, 0.668324f, -0.74387f, 0f,
        36.80331f, -9.468537f, 3E-06f, 0.295262f, 0.295079f, 0.668324f, -0.74387f, 0f,
        32.87957f, -12.99379f, 69.12115f, 0.281107f, 0.04573101f, 0.668324f, -0.74387f, 0f,
        32.87957f, -12.99379f, 3E-06f, 0.281107f, 0.295079f, 0.668325f, -0.74387f, 0f,
        -35.19669f, -9.468537f, 73.42635f, 0.035529f, 0.03020102f, -0.509696f, -0.860355f, 0f,
        -29.24615f, -12.99379f, 69.12115f, 0.056995f, 0.04573101f, -0.509696f, -0.860355f, 0f,
        -35.19669f, -9.468537f, 3E-06f, 0.035529f, 0.295079f, -0.509696f, -0.860355f, 0f,
        -29.24615f, -12.99379f, 3E-06f, 0.056995f, 0.295079f, -0.509696f, -0.860355f, 0f,
    };

    /**
     * The number of vertices in the array.
     */
    public static final int INDEX_COUNT = 258;

    /**
     * The number of floats in the array.
     */
    public static final int INDEX_BYTE_COUNT = 516;

    /**
     * Vertex data.
     */
    public static final short[] INDICES =
    {
        0, 1, 2, 
        2, 1, 3, 
        4, 5, 6, 
        6, 5, 7, 
        8, 9, 10, 
        10, 9, 11, 
        12, 13, 14, 
        14, 13, 15, 
        16, 17, 18, 
        18, 17, 19, 
        20, 21, 22, 
        22, 21, 23, 
        21, 24, 23, 
        23, 24, 25, 
        26, 27, 24, 
        24, 27, 25, 
        20, 22, 26, 
        26, 22, 27, 
        28, 29, 30, 
        30, 29, 31, 
        32, 33, 29, 
        29, 33, 31, 
        34, 35, 32, 
        32, 35, 33, 
        34, 28, 35, 
        35, 28, 30, 
        36, 37, 38, 
        38, 37, 39, 
        40, 41, 42, 
        42, 41, 43, 
        44, 45, 46, 
        46, 45, 47, 
        48, 49, 50, 
        50, 49, 51, 
        52, 53, 54, 
        54, 53, 55, 
        56, 57, 58, 
        58, 57, 59, 
        60, 61, 62, 
        62, 61, 63, 
        64, 65, 66, 
        66, 65, 67, 
        68, 69, 70, 
        70, 69, 71, 
        69, 72, 71, 
        71, 72, 73, 
        72, 74, 73, 
        73, 74, 75, 
        74, 68, 75, 
        75, 68, 70, 
        76, 77, 78, 
        78, 77, 79, 
        77, 80, 79, 
        79, 80, 81, 
        80, 82, 81, 
        81, 82, 83, 
        82, 76, 83, 
        83, 76, 78, 
        84, 85, 86, 
        86, 85, 87, 
        88, 89, 90, 
        90, 89, 91, 
        92, 93, 94, 
        94, 93, 95, 
        96, 97, 98, 
        98, 97, 99, 
        100, 101, 102, 
        102, 101, 103, 
        104, 105, 106, 
        106, 105, 107, 
        108, 109, 110, 
        110, 109, 111, 
        112, 113, 114, 
        114, 113, 115, 
        116, 117, 118, 
        118, 117, 119, 
        120, 121, 122, 
        122, 121, 123, 
        124, 125, 126, 
        126, 125, 127, 
        128, 129, 130, 
        130, 129, 131, 
        132, 133, 134, 
        134, 133, 135, 
        136, 137, 138, 
        138, 137, 139, 
    };
    /**
     * A VBO handle for vertices.
     */
    private static int vertVbo;

    /**
     * A VBO handle for vertices.
     */
    private static int indVbo;

    /**
     * Prevents initialization of DoorData.
     */
    private DoorData()
    {
    }

    /**
     * Gets a VBO that contains the vertex data for the model "Door.obj".
     * @param gl The OpenGL context.
     * @return A VBO handle.
     */
    public static int getVertexBufferId(GL11 gl)
    {
        if (vertVbo == 0)
        {
            ByteBuffer byteBuf = ByteBuffer.allocateDirect(VERTEX_BYTE_COUNT);
            byteBuf.order(ByteOrder.nativeOrder());
            FloatBuffer buffer = byteBuf.asFloatBuffer();
            buffer.put(VERTICES);
            buffer.position(0);

            //generate a VBO.
            int[] tempPtr = new int[1];
            gl.glGenBuffers(1, tempPtr, 0);
            vertVbo = tempPtr[0];

            //send data to GPU.
            gl.glBindBuffer(GL11.GL_ARRAY_BUFFER, vertVbo);
            gl.glBufferData(GL11.GL_ARRAY_BUFFER, VERTEX_BYTE_COUNT, buffer, GL11.GL_STATIC_DRAW);
            gl.glBindBuffer(GL11.GL_ARRAY_BUFFER, 0);
        }

        return vertVbo;
    }

    /**
     * Gets a VBO that contains the index data for the model "Door.obj".
     * @param gl The OpenGL context.
     * @return A VBO handle.
     */
    public static int getIndexBufferId(GL11 gl)
    {
        if (indVbo == 0)
        {
            ByteBuffer byteBuf = ByteBuffer.allocateDirect(INDEX_BYTE_COUNT);
            byteBuf.order(ByteOrder.nativeOrder());
            ShortBuffer buffer = byteBuf.asShortBuffer();
            buffer.put(INDICES);
            buffer.position(0);

            //generate a VBO.
            int[] tempPtr = new int[1];
            gl.glGenBuffers(1, tempPtr, 0);
            indVbo = tempPtr[0];

            //send data to GPU.
            gl.glBindBuffer(GL11.GL_ARRAY_BUFFER, indVbo);
            gl.glBufferData(GL11.GL_ARRAY_BUFFER, INDEX_BYTE_COUNT, buffer, GL11.GL_STATIC_DRAW);
            gl.glBindBuffer(GL11.GL_ARRAY_BUFFER, 0);
        }

        return indVbo;
    }

    /**
     * Unloads the model data from the VBO.
     * @param gl The OpenGL context.
     */
    public static void unload(GL11 gl)
    {
        /*if (vertVbo != 0)
        {
            int[] buffers = { vertVbo };
            gl.glDeleteBuffers(1, buffers, 0);
            vertVbo = 0;
        }

        if (indVbo != 0)
        {
            int[] buffers = { indVbo };
            gl.glDeleteBuffers(1, buffers, 0);
            indVbo = 0;
        }*/
        
        vertVbo = 0;
        indVbo = 0;
    }
}
